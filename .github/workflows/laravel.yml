name: Hypixel Signatures

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  node:
    name: Node
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    steps:
      - name: Checkout the project
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Setup pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build and compile assets
        run: |
          pnpm run production

      - name: Upload built assets
        uses: actions/upload-artifact@v4
        with:
          name: built-assets
          path: public

  php:
    name: PHP ${{ matrix.php }}
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    strategy:
      matrix:
        php: [ '8.4' ]

    steps:
      - name: Checkout the project
        uses: actions/checkout@v4

      - name: Setup the PHP ${{ matrix.php }} environment on ${{ runner.os }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: none
          ini-values: opcache.enable_cli=1, opcache.jit=tracing, opcache.jit_buffer_size=64M

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Restore the Composer cache directory
        id: composercache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

  phpunit:
    name: PHPUnit
    runs-on: ubuntu-latest
    needs: [ php, node ]
    strategy:
      matrix:
        php: [ '8.4' ]
    env:
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      DB_USERNAME: root
      DB_DATABASE: hypixel_signatures
      DB_HOST: 127.0.0.1
      DB_PASSWORD: password
      REDIS_HOST: 127.0.0.1

    services:
      mysql:
        image: mysql
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: hypixel_signatures
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout the project
        uses: actions/checkout@v4

      - name: Setup the PHP ${{ matrix.php }} environment on ${{ runner.os }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: none
          ini-values: opcache.enable_cli=1, opcache.jit=tracing, opcache.jit_buffer_size=64M
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore the Composer cache directory
        id: composercache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Generate application key
        run: php artisan key:generate

      - name: Optimize
        run: php artisan optimize
        env:
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
          HYPIXEL_API_KEY: ${{ secrets.HYPIXEL_API_KEY }}

      - name: Download built assets
        uses: actions/download-artifact@v4
        with:
          name: built-assets
          path: public

      - name: Run migrations
        run: php artisan migrate --force

      - name: Execute tests (Unit and Feature tests) via PHPUnit
        run: vendor/bin/phpunit
        env:
          HYPIXEL_API_KEY: ${{ secrets.HYPIXEL_API_KEY }}
