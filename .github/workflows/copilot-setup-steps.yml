name: "Copilot Setup Steps"

# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Start MySQL service
        run: docker run -d --name test-mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=hypixelsignatures -p 3306:3306 mysql:latest

      - name: Wait for MySQL to be ready
        run: |
          until docker exec test-mysql mysqladmin ping -h "127.0.0.1" --silent; do
            echo 'Waiting for MySQL to be ready...'
            sleep 2
          done
          echo 'MySQL is ready!'

      - uses: pnpm/action-setup@v4
        name: Setup pnpm
        with:
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Setup the PHP 8.4 environment on ${{ runner.os }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          coverage: none
          ini-values: opcache.enable_cli=1, opcache.jit=tracing, opcache.jit_buffer_size=64M

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.testing.example', '.env');"

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.testing.example', '.env.testing');"

      - name: Restore the Composer cache directory
        id: composercache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-copilot-composer-${{ hashFiles('**/composer.json') }}

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Generate application key
        run: php artisan key:generate

      - name: Generate application key
        run: php artisan key:generate --env=testing

      - name: Install dependencies
        run: pnpm install

      - name: Run migrations
        run: php artisan migrate --force
